```{r global_setup,  warning=FALSE, cache=FALSE,echo=FALSE,error=FALSE,results='hide'}
require(knitr)
# default settings, # settings for presentation version
echo.val<-F
fig.height<-5
dpi<-150
cache<-T
fig.path<-"pres_figures/"
cache.path<-"pres_cache/"

if(exists("printed")) { # settings for printed version (if the variable exists)
  echo.val<-T # show code
  fig.height<-3
  dpi<-150
  cache<-T
  fig.path<-"print_figures/"
  cache.path<-"print_cache/"
}

opts_chunk$set(dpi=dpi,cache=cache,
               cache.path=cache.path,results='hide',
               warning=F,fig.align='center',echo=echo.val,
               fig.height=fig.height,fig.path=fig.path,message=F) #dev="CairoPNG"
```

```{r script_setup,results='hide',cache=FALSE}
require(ggplot2)
require(lattice) # nicer scatter plots
require(plyr)
require(grid) # contains the arrow function
require(biOps)
require(doMC) # for parallel code
require(EBImage)
## To install EBImage
# source("http://bioconductor.org/biocLite.R")
# biocLite("EBImage")

# start parallel environment
registerDoMC()
# functions for converting images back and forth
im.to.df<-function(in.img) {
    out.im<-expand.grid(x=1:nrow(in.img),y=1:ncol(in.img))
    out.im$val<-as.vector(in.img)
    out.im
}
df.to.im<-function(in.df,val.col="val",inv=F) {
  in.vals<-in.df[[val.col]]
  if(class(in.vals[1])=="logical") in.vals<-as.integer(in.vals*255)
  if(inv) in.vals<-255-in.vals
  out.mat<-matrix(in.vals,nrow=length(unique(in.df$x)),byrow=F)
  attr(out.mat,"type")<-"grey"
  out.mat
}
ddply.cutcols<-function(...,cols=1) {
  # run standard ddply command
  cur.table<-ddply(...)
  cutlabel.fixer<-function(oVal) {
    sapply(oVal,function(x) {
      cnv<-as.character(x)
      mean(as.numeric(strsplit(substr(cnv,2,nchar(cnv)-1),",")[[1]]))
    })
  }
  cutname.fixer<-function(c.str) {
    s.str<-strsplit(c.str,"(",fixed=T)[[1]]
    t.str<-strsplit(paste(s.str[c(2:length(s.str))],collapse="("),",")[[1]]
    paste(t.str[c(1:length(t.str)-1)],collapse=",")
  }
  for(i in c(1:cols)) {
    cur.table[,i]<-cutlabel.fixer(cur.table[,i])
    names(cur.table)[i]<-cutname.fixer(names(cur.table)[i])
  }
  cur.table
}

colMeans.df<-function(x,...) as.data.frame(t(colMeans(x,...)))
```

Quantitative Big Imaging  
========================================================
author: Kevin Mader
date: 20 March 2014
width: 1440
height: 900
transition: rotate


## Analysis of Single Objects


Course Outline
========================================================
- 20th February - Introductory Lecture
- 27th February - Filtering and Image Enhancement (A. Kaestner)
- 6th March - Basic Segmentation, Discrete Binary Structures
- 13th March - Advanced Segmentation
- 20th March - **Analyzing Single Objects**
- 27th March -  Analyzing Complex Objects
- 3rd April -  Spatial Distribution
- 10th April -  Statistics and Reproducibility
- 17th April - Dynamic Experiments
- 8th May - Big Data
- 15th May - Guest Lecture - Applications in Material Science
- 22th May - Project Presentations

Literature / Useful References
========================================================

- Jean Claude, Morphometry with R
 - [Online](http://link.springer.com/book/10.1007%2F978-0-387-77789-4) through ETHZ
 - [Buy it](http://www.amazon.com/Morphometrics-R-Use-Julien-Claude/dp/038777789X)
- John C. Russ, “The Image Processing Handbook”,(Boca Raton, CRC Press)
 - Available [online](http://dx.doi.org/10.1201/9780203881095) within domain ethz.ch (or proxy.ethz.ch / public VPN) 

Previously on QBI ...
========================================================

- Image Enhancment 
 - Highlighting the contrast of interest in images
 - Minimizing Noise
- Segementation
 - Understanding value histograms
 - Dealing with multi-valued data
 - Automatic Methods
 - Hysteresis Method, K-Means Analysis
- Regions of Interest
 - Contouring 
- Component Labeling


Learning Objectives
========================================================

### Motivation (Why and How?)
- How do we quantify where and how big our objects are?
- How can we say something about the shape?
- How can we compare objects of different sizes?
- How can we compare two images on the basis of the shape as calculated from the images?
- How can we put objects into an finite element simulation? or make pretty renderings?


Outline
========================================================

- Motivation (Why and How?)
- Object Characterization
 - Volume
 - Center and Extents
 - Anisotropy

***

- Shape Tensor
 - Principal Component Analysis
 - Ellipsoid Representation
 - Scale-free metrics
 - Anisotropy, Oblateness
- Meshing
 - Marching Cubes
 - Isosurfaces
 - Surface Area
 
 
Motivation
===

We have dramatically simplified our data, but there is still too much.

- We perform an experiment bone to see how big the cells are inside the tissue
$$\downarrow$$ ![Bone Measurement](ext-figures/tomoimage.png) 

### 2560 x 2560 x 2160 x 32 bit = 56GB / sample
- Filtering and Enhancement!  
$$\downarrow$$
- 56GB of less noisy data
- __Segmentation__
$$\downarrow$$
### 2560 x 2560 x 2160 x 1 bit = 1.75GB / sample
- Still an aweful lot of inpenetrable data

What did we want in the first place
========================================================

### _Single number_:
* volume fraction,
* cell count,
* average cell stretch,
* cell volume variability


From the labels
===

```{r, fig.cap="Cell Colony",fig.height=7}
cell.im<-jpeg::readJPEG("ext-figures/Cell_Colony.jpg")
cell.lab.df<-im.to.df(bwlabel(cell.im<.6))
size.histogram<-ddply(subset(cell.lab.df,val>0),.(val),function(c.label) data.frame(count=nrow(c.label)))
keep.vals<-subset(size.histogram,count>25)
cur.cell.id<-subset(cell.lab.df,val %in% keep.vals$val)$val[1]
cur.cell.df<-subset(cell.lab.df,val==cur.cell.id)
ggplot(subset(cell.lab.df,val %in% keep.vals$val),aes(x=x,y=y,fill=as.numeric(as.factor(val))))+
  geom_raster()+
  geom_tile(data=cur.cell.df,fill="red",alpha=0.5)+
  labs(fill="Label",title="Larger Cells (>25px)")+
  theme_bw(20)+coord_equal()
```

***

### What we would like to to do

- Count the cells
- Say something about the cells
- Compare the cells in this image to another image
- But where do we start?

With a single object
===
$$ I_{id}(x,y) = 
\begin{cases}
1, & L(x,y) = id \\
0, & \text{otherwise}
\end{cases}$$

```{r, fig.cap="Single Cell",fig.height=7}
mean.df<-colMeans.df(cur.cell.df[,c("x","y")])
ggplot(cur.cell.df,aes(x=x,y=y))+
  geom_tile(color="black",fill="grey")+
  geom_point(data=main.df,color="red",pch=3,size=20)+
  labs(title="Single Cell")+
  theme_bw(20)+coord_equal()+guides(fill=F)
```

***

### Define a center
$$ \bar{x} = \frac{1}{N} \sum_{\vec{x}\in I_{id}} \vec{x}\cdot\vec{i} $$
$$ \bar{y} = \frac{1}{N} \sum_{\vec{x}\in I_{id}} \vec{x}\cdot\vec{j} $$
$$ \bar{z} = \frac{1}{N} \sum_{\vec{x}\in I_{id}} \vec{x}\cdot\vec{k} $$


With a single object
===


```{r, fig.cap="Single Cell",fig.height=7}
cell.extents<-data.frame(xmin=c(mean.df$x,min(cur.cell.df$x)),
                         xmax=c(mean.df$x,max(cur.cell.df$x)),
                         ymin=c(min(cur.cell.df$y),mean.df$y),
                         ymax=c(max(cur.cell.df$y),mean.df$y))
ggplot(cur.cell.df,aes(x=x,y=y))+
  geom_tile(color="black",fill="grey")+
  geom_segment(data=cell.extents,aes(x=xmin,y=ymax, xend=xmax,yend=ymax),color="red",size=1)+
  labs(title="Single Cell")+
  theme_bw(20)+coord_equal()+guides(fill=F)
```

***

### Define a center
$$ \bar{x} = \frac{1}{N} \sum_{\vec{x}\in I_{id}} \vec{x}\cdot\vec{i} $$
$$ \bar{y} = \frac{1}{N} \sum_{\vec{x}\in I_{id}} \vec{x}\cdot\vec{j} $$
$$ \bar{z} = \frac{1}{N} \sum_{\vec{x}\in I_{id}} \vec{x}\cdot\vec{k} $$



